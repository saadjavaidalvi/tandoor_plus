// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

import 'package:user/generated/json/notification_new_message_entity_helper.dart';
import 'package:user/generated/json/notification_payload_entity_helper.dart';
import 'package:user/models/notification_new_message_entity.dart';

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:user/models/notification_payload_entity.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case NotificationPayloadEntity:
        return notificationPayloadEntityFromJson(
            data as NotificationPayloadEntity, json) as T;
      case NotificationNewMessageEntity:
        return notificationNewMessageEntityFromJson(
            data as NotificationNewMessageEntity, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case NotificationPayloadEntity:
        return notificationPayloadEntityToJson(
            data as NotificationPayloadEntity);
      case NotificationNewMessageEntity:
        return notificationNewMessageEntityToJson(
            data as NotificationNewMessageEntity);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type == (NotificationPayloadEntity).toString()) {
      return NotificationPayloadEntity().fromJson(json);
    } else if (type == (NotificationNewMessageEntity).toString()) {
      return NotificationNewMessageEntity().fromJson(json);
    }
    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (<NotificationPayloadEntity>[] is M) {
      return data
          .map<NotificationPayloadEntity>(
              (e) => NotificationPayloadEntity().fromJson(e))
          .toList() as M;
    } else if (<NotificationNewMessageEntity>[] is M) {
      return data
          .map<NotificationNewMessageEntity>(
              (e) => NotificationNewMessageEntity().fromJson(e))
          .toList() as M;
    }
    throw Exception("not fond");
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
